{
  "project": {
    "name": "Enguio Inventory System",
    "version": "1.0.0",
    "lastUpdated": "2025-10-09",
    "complianceStatus": "enforced"
  },
  "rules": {
    "critical": [
      {
        "id": "no-hardcoded-urls",
        "description": "All API base URLs MUST use environment variables",
        "severity": "error",
        "enforced": true,
        "autoFix": true
      },
      {
        "id": "no-hardcoded-credentials",
        "description": "All database credentials MUST be in .env file",
        "severity": "error",
        "enforced": true,
        "autoFix": true
      }
    ],
    "recommended": [
      {
        "id": "use-apiconfig",
        "description": "Use apiConfig.js for centralized configuration",
        "severity": "warning",
        "enforced": false
      },
      {
        "id": "use-apihandler",
        "description": "Use apiHandler.js for API calls",
        "severity": "warning",
        "enforced": false
      }
    ]
  },
  "patterns": {
    "frontend": {
      "correct": [
        "import { getApiUrl } from '@/app/lib/apiConfig';",
        "const url = getApiUrl('backend.php');",
        "const url = `${process.env.NEXT_PUBLIC_API_BASE_URL}/backend.php`;",
        "import apiHandler from '@/app/lib/apiHandler';"
      ],
      "incorrect": [
        "const url = \"http://localhost/caps2e2/Api/backend.php\";",
        "const API_BASE = \"http://localhost/caps2e2/Api\";",
        "fetch('http://localhost/caps2e2/Api/sales_api.php', ...)"
      ]
    },
    "backend": {
      "correct": [
        "require_once __DIR__ . '/conn.php';",
        "$conn = getDatabaseConnection();",
        "$conn = getMySQLiConnection();",
        "$servername = $_ENV['DB_HOST'];"
      ],
      "incorrect": [
        "$conn = new mysqli(\"localhost\", \"root\", \"\", \"enguio2\");",
        "$conn = new PDO(\"mysql:host=localhost;dbname=enguio2\", \"root\", \"\");",
        "$servername = \"localhost\";"
      ]
    }
  },
  "environmentVariables": {
    "frontend": {
      "file": ".env.local",
      "required": [
        "NEXT_PUBLIC_API_BASE_URL"
      ],
      "optional": [
        "NEXT_PUBLIC_APP_NAME",
        "NEXT_PUBLIC_APP_VERSION"
      ]
    },
    "backend": {
      "file": ".env",
      "required": [
        "DB_HOST",
        "DB_DATABASE",
        "DB_USER",
        "DB_PASS",
        "DB_CHARSET"
      ],
      "optional": [
        "DB_PORT",
        "APP_ENV"
      ]
    }
  },
  "keyFiles": {
    "configuration": [
      "app/lib/apiConfig.js",
      "app/lib/apiHandler.js",
      "app/hooks/useAPI.js",
      "Api/conn.php",
      "simple_dotenv.php"
    ],
    "environment": [
      ".env.local",
      ".env",
      ".env.example"
    ],
    "documentation": [
      "AI_CODING_RULES.md",
      ".cursorrules",
      ".aiagent",
      "START_HERE_ENV_SETUP.md",
      "API_ENV_SETUP.md",
      "ENV_IMPLEMENTATION_STATUS.md"
    ],
    "verification": [
      "verify_env_implementation.sh"
    ]
  },
  "detection": {
    "violations": {
      "hardcodedUrls": {
        "pattern": "http://localhost/caps2e2/Api",
        "exclude": [
          "NEXT_PUBLIC_API_BASE_URL",
          "apiConfig.js"
        ],
        "severity": "error"
      },
      "hardcodedDbCredentials": {
        "patterns": [
          "new mysqli\\(\"localhost\"",
          "new PDO\\(\"mysql:host=localhost",
          "\\$servername = \"localhost\""
        ],
        "exclude": [
          "$_ENV",
          "conn.php"
        ],
        "severity": "error"
      }
    },
    "commands": {
      "checkFrontendUrls": "grep -r \"http://localhost/caps2e2/Api\" app/ --include=\"*.js\" | grep -v \"NEXT_PUBLIC_API_BASE_URL\"",
      "checkBackendDb": "grep -r \"new mysqli\\(\\\"localhost\\\"\" Api/ --include=\"*.php\"",
      "verifyAll": "./verify_env_implementation.sh"
    }
  },
  "autoFix": {
    "enabled": true,
    "fixes": {
      "hardcodedUrl": {
        "action": "replace",
        "with": "import { getApiUrl } from '@/app/lib/apiConfig';\nconst url = getApiUrl('${filename}');"
      },
      "hardcodedDb": {
        "action": "replace",
        "with": "require_once __DIR__ . '/conn.php';\n$conn = getDatabaseConnection();"
      }
    }
  },
  "verification": {
    "script": "verify_env_implementation.sh",
    "expectedResults": {
      "envLocalExists": true,
      "envExampleExists": true,
      "apiConfigExists": true,
      "filesUsingEnvVars": ">= 70",
      "hardcodedUrlsFound": 0,
      "connPhpUsesEnv": true
    },
    "lastVerified": "2025-10-09",
    "status": "passed"
  },
  "aiAgentInstructions": {
    "onCreate": {
      "frontend": [
        "Always import from apiConfig.js or use apiHandler",
        "Never hardcode URLs",
        "Use environment variables",
        "Add fallback for safety"
      ],
      "backend": [
        "Always include conn.php for database",
        "Never hardcode credentials",
        "Use getDatabaseConnection() or getMySQLiConnection()",
        "Load environment with simple_dotenv.php"
      ]
    },
    "onModify": {
      "scan": [
        "Check for hardcoded URLs",
        "Check for hardcoded credentials",
        "Verify environment variable usage"
      ],
      "suggest": [
        "Fixes for violations",
        "Better patterns if applicable",
        "Maintain consistency with existing code"
      ]
    },
    "beforeCommit": [
      "Run verification script",
      "Check for violations",
      "Ensure all tests pass"
    ]
  },
  "examples": {
    "frontendApiCall": {
      "correct": "import { getApiUrl } from '@/app/lib/apiConfig';\nconst url = getApiUrl('backend.php');\nconst response = await fetch(url, {...});",
      "incorrect": "const url = 'http://localhost/caps2e2/Api/backend.php';\nconst response = await fetch(url, {...});"
    },
    "backendDbConnection": {
      "correct": "require_once __DIR__ . '/conn.php';\n$conn = getDatabaseConnection();",
      "incorrect": "$conn = new mysqli('localhost', 'root', '', 'enguio2');"
    }
  },
  "compliance": {
    "filesCompliant": 70,
    "filesTotal": 70,
    "complianceRate": "100%",
    "hardcodedUrlsRemaining": 0,
    "status": "fully_compliant",
    "verified": true
  }
}

